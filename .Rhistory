num_surgical_beds_usable = col_integer(),
num_surgical_beds_approved = col_integer(),
num_theatres = col_integer(),
num_surgeons_qual = col_integer(),
num_surgeons_unqual = col_integer(),
num_nurses = col_integer(),
dispensing = col_character(),
open_hours = col_character(),
emergency = col_character(),
notes = col_character(),
water = col_character(),
electricity = col_character(),
wheelchair = col_character(),
completeness = col_character(),
admin3_abb = col_character(),
fac_id = col_character(),
super_type = col_character()
)
)
count_facilities <- mfl_refined %>% group_by(dataset, admin1_abb) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= mean(n)) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
completeness_tb <- mfl_refined %>%
group_by(dataset) %>%
summarise("Average completeness (%)" = round(mean(completeness)))
mfl_refined <- read_csv("data/tidy_data/mfl_refine.csv", col_names = TRUE,
cols(dataset = col_character(),
country_name = col_character(),
country_iso3c = col_character(),
admin1_name = col_character(),
admin1_abb = col_character(),
admin2_name = col_character(),
admin2_abb = col_character(),
admin3_name = col_character(),
admin4_name = col_character(),
city_name = col_character(),
lat = col_double(),
long = col_double(),
type = col_character(),
sector = col_character(),
fac_name = col_character(),
osm_id = col_character(),
osm_type = col_character(),
date_closed = col_date(),
date_opened = col_date(),
contact_person = col_character(),
phys_address = col_character(),
post_address = col_character(),
web = col_character(),
contact_phone = col_character(),
contact_email = col_character(),
org_owner = col_character(),
org_rural_urban = col_character(),
services = col_character(),
num_beds_usable = col_integer(),
num_beds_approved = col_integer(),
num_surgical_beds_usable = col_integer(),
num_surgical_beds_approved = col_integer(),
num_theatres = col_integer(),
num_surgeons_qual = col_integer(),
num_surgeons_unqual = col_integer(),
num_nurses = col_integer(),
dispensing = col_character(),
open_hours = col_character(),
emergency = col_character(),
notes = col_character(),
water = col_character(),
electricity = col_character(),
wheelchair = col_character(),
completeness = col_double(),
admin3_abb = col_character(),
fac_id = col_character(),
super_type = col_character()
)
)
count_facilities <- mfl_refined %>% group_by(dataset, admin1_abb) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= mean(n)) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
completeness_tb <- mfl_refined %>%
group_by(dataset) %>%
summarise("Average completeness (%)" = round(mean(completeness)))
completeness_tb %>%  kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), full_width = F)
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac > 1 & num_fac <=5)
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac >5)
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac > 1 & num_fac <=5)
mfl_tb_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac == 1)
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac == 1)
View(hosp_bed_tb)
test <- mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac == 1)
View(test)
View(hosp_bed_tb)
mfl_tb_all <- mfl_tb %>%
# Capture which dataframe each row came from
bind_rows(list(hosp_bed_tb,
dhb_2016_tb,
dhb_2018_tb,
doh_dd_tb,
kemri_who_tb,
healthsites_augmented_tb), .id = "id" ) %>%
# Rename the dataset IDs to something sensible
mutate(id = case_when(id == "2" ~ "Hospital Bed",
id == "3" ~ "DHB 2016",
id == "4" ~ "DHB 2018",
id == "5" ~ "DOH DD",
id == "6" ~ "KEMRI/WHO",
id == "7" ~ "Healthsites.io")) %>%
# Rename the id column to dataset to avoid confusion with facility id
rename(dataset = id)
mfl_tb_all_clean <- mfl_tb_all %>%
# First add country name and code for each as we know it's implicit but not necessarily explicitly added to the raw data
mutate(country_name = case_when(is.na(country_name) ~ "South Africa",
TRUE ~ as.character(country_name)),
country_iso3c = case_when(is.na(country_iso3c) ~ "ZAF",
TRUE ~ as.character(country_iso3c))) %>%
# Some facilities do not have names (healthsites.io)
mutate(fac_name = case_when(fac_name == "" ~ NA_character_,
TRUE ~ as.character(fac_name))) %>%
# Count number of variables that is not missing in each row and calculate percentage completeness for each row (46 columns)
mutate(completeness = as.numeric(apply(., MARGIN = 1, function(x) sum(!is.na(x))/dim(mfl_tb_all)[2]*100))) %>%
mutate(type = str_to_lower(type)) %>%
mutate(type = str_replace(type, ("^wc "), ''))
mfl_tb_all_clean <- mfl_tb_all_clean %>%
mutate(super_type = case_when(str_detect(type, "clinic") ~ "clinic",
type == "clinix" ~ "hospital",
type == "community day centre" ~ "community health centre",
str_detect(type, "community health centre") ~ "community health centre",
str_detect(type, "hospital") ~ "hospital",
str_detect(type, "doctor") ~ "doctor",
str_detect(type, "environmental health service") ~ "ehs",
str_detect(type, "ehs") ~ "ehs",
str_detect(type, "forensic") ~ "forensic",
type == "frail care" ~ "frail care/hospice",
type == "general practitioner" ~ "doctor",
type == "health district office" ~ "health office",
type == "health sub-district office" ~ "health office",
type == "home based care" ~ "frail care/hospice",
type == "hospice" ~ "frail care/hospice",
# This isn't strictly true - all independent seem to be private but some are clinics
# Will have to be evaluated manually!
type == "independent" ~ "hospital",
type == "lenmed" ~ "hospital",
type == "life" ~ "hospital",
type == "longterm care" ~ "frail care/hospice",
type == "mediclinic" ~ "hospital",
type == "mediclnic" ~ "hospital",
type == "melomed" ~ "hospital",
type == "medical centre" ~ "hospital",
type == "mental health centre" ~ "mental health care",
type == "midwife obstetrics unit" ~ "midwife",
type == "mining" ~ "hospital",
type == "mobile service" ~ "mobile service",
type == "netcare" ~ "hospital",
type == "nurse practitioner" ~ "nurse",
type == "occupational health centre" ~ "occupational health centre",
type == "province" ~ "pharmaceutical/pharmacy",
str_detect(type, "oral") ~ "oral health care",
str_detect(type, "pharma") ~ "pharmaceutical/pharmacy",
type == "primary condom distribution site" ~ "condom distribution site",
str_detect(type, "ems station") ~ "ems station",
## Must be edited manually as it's a mix of hospitals, clinics etc
type == "private ward" ~ "hospital",
type == "psychiatry home" ~ "mental health care",
str_detect(type, "reproductive") ~ "reproductive service",
str_detect(type, "school") ~ "school health service",
type == "surgical centre" ~ "hospital",
type == "ward" ~ "hospital",
type == '' ~ NA_character_,
TRUE ~ as.character(type)
)
)
write_csv(mfl_tb_all_clean, "data/tmp_data/mfl_tb_all_clean.csv")
mfl_refined <- read_csv("data/tidy_data/mfl_refine.csv", col_names = TRUE,
cols(dataset = col_character(),
country_name = col_character(),
country_iso3c = col_character(),
admin1_name = col_character(),
admin1_abb = col_character(),
admin2_name = col_character(),
admin2_abb = col_character(),
admin3_name = col_character(),
admin4_name = col_character(),
city_name = col_character(),
lat = col_double(),
long = col_double(),
type = col_character(),
sector = col_character(),
fac_name = col_character(),
osm_id = col_character(),
osm_type = col_character(),
date_closed = col_date(),
date_opened = col_date(),
contact_person = col_character(),
phys_address = col_character(),
post_address = col_character(),
web = col_character(),
contact_phone = col_character(),
contact_email = col_character(),
org_owner = col_character(),
org_rural_urban = col_character(),
services = col_character(),
num_beds_usable = col_integer(),
num_beds_approved = col_integer(),
num_surgical_beds_usable = col_integer(),
num_surgical_beds_approved = col_integer(),
num_theatres = col_integer(),
num_surgeons_qual = col_integer(),
num_surgeons_unqual = col_integer(),
num_nurses = col_integer(),
dispensing = col_character(),
open_hours = col_character(),
emergency = col_character(),
notes = col_character(),
water = col_character(),
electricity = col_character(),
wheelchair = col_character(),
completeness = col_double(),
admin3_abb = col_character(),
fac_id = col_character(),
super_type = col_character()
)
)
count_facilities <- mfl_refined %>% group_by(dataset, admin1_abb) %>%
tally(name = "facilities") %>%
mutate(dataset = fct_reorder(dataset, -facilities))
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= mean(n)) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= (0.5*mean(n))) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= mean(n)) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
completeness_tb <- mfl_refined %>%
group_by(dataset) %>%
summarise("Average completeness (%)" = round(mean(completeness)))
completeness_tb %>%  kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"), full_width = F)
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac > 1 & num_fac <=5)
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac > 1 & num_fac <=5) %>%
summarise()
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac > 1 & num_fac <=5) %>%
summarise(total = sum(num_fac))
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac > 1 & num_fac <=5)
test <- mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac == 1)
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac == 1)
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset") +
geom_text(aes(label=Number), position=position_dodge(width=0.9), vjust=-0.25)
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset") +
geom_text(aes(label=facilities), position=position_dodge(width=0.9), vjust=-0.25)
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset") +
geom_text(aes(label=facilities), vjust=-0.25)
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset") +
geom_text(aes(label=facilities))
View(count_facilities)
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset") +
geom_text(data = count_facilities %>%
group_by(dataset, admin1_abb) %>%
summarise(Value = sum(facilities, na.rm = TRUE)),
aes(label = Value, x = admin1_abb, y = Value), inherit.aes = FALSE,
vjust = -1, size = 2)
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= mean(n)) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
View(kemri_who_tb)
mfl_refined <- read_csv("data/tidy_data/mfl_refine.csv", col_names = TRUE,
cols(dataset = col_character(),
country_name = col_character(),
country_iso3c = col_character(),
admin1_name = col_character(),
admin1_abb = col_character(),
admin2_name = col_character(),
admin2_abb = col_character(),
admin3_name = col_character(),
admin4_name = col_character(),
city_name = col_character(),
lat = col_double(),
long = col_double(),
type = col_character(),
sector = col_character(),
fac_name = col_character(),
osm_id = col_character(),
osm_type = col_character(),
date_closed = col_date(),
date_opened = col_date(),
contact_person = col_character(),
phys_address = col_character(),
post_address = col_character(),
web = col_character(),
contact_phone = col_character(),
contact_email = col_character(),
org_owner = col_character(),
org_rural_urban = col_character(),
services = col_character(),
num_beds_usable = col_integer(),
num_beds_approved = col_integer(),
num_surgical_beds_usable = col_integer(),
num_surgical_beds_approved = col_integer(),
num_theatres = col_integer(),
num_surgeons_qual = col_integer(),
num_surgeons_unqual = col_integer(),
num_nurses = col_integer(),
dispensing = col_character(),
open_hours = col_character(),
emergency = col_character(),
notes = col_character(),
water = col_character(),
electricity = col_character(),
wheelchair = col_character(),
completeness = col_double(),
admin3_abb = col_character(),
fac_id = col_character(),
super_type = col_character()
)
)
count_facilities %>%
ggplot(aes(x = dataset, y = facilities, fill = admin1_abb)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y = "Number of facilities listed", x = "") +
ggtitle("Number of facilities listed in each dataset")
mfl_refined %>%
group_by(dataset, super_type) %>%
# Count number of super_types per datase
tally() %>%
# Extract only most common ones as the legend is very unwieldy otherwise (too many categories and not a nice way to facet)
filter(n >= mean(n)) %>%
ggplot(aes(x = dataset, y = n, fill = super_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(legend.position ="bottom") +
labs(y = "Number of occurrences of facility type", x = "", fill = "Facility type") +
ggtitle("Most frequently occurring facility types in each dataset")
completeness_tb <- mfl_refined %>%
group_by(dataset) %>%
summarise("Average completeness (%)" = round(mean(completeness)))
mfl_refined %>%
# Try to see how many times each facility name appears in the dataset without cleaning things up
# Facility names are also grouped by admin levels as sometimes the same name appears in different regions
group_by(fac_name, admin1_abb, admin2_name, admin3_name, admin4_name) %>%
tally(name = "num_fac", sort = TRUE) %>%
filter(num_fac > 1)
