library(tidyverse)
hospital_list <- read_csv('data/za_hospital_list_temp.csv')
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
merge(district_names, by = c('province','district_mdb'))
updated_hospital_list <- hospital_list %>%
merge(district_names, by = c('district_mdb'))
View(district_names)
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
merge(district_names, by = c('province', 'district_mdb'))
View(hospital_list)
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
merge(district_names, by = c('province', 'district_mdb'))
columns_all <-  colnames(updated_hospital_list)
colnames(updated_hospital_list)
updated_hospital_list <- hospital_list %>%
merge(district_names, by = c('province', 'district_mdb')) %>%
relocate('district_names', .after = district_mdb)
library(tidyverse)
updated_hospital_list <- hospital_list %>%
merge(district_names, by = c('province', 'district_mdb')) %>%
relocate('district_names', .after = district_mdb)
library(dplyr)
library(tidyverse)
devtools::install_github("tidyverse/dplyr")
library(dplyr)
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_names', .after = district_mdb)
library(dplyr, warn.conflicts = FALSE)
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_names', .after = district_mdb)
devtools::install_github("tidyverse/dplyr")
library(dplyr, warn.conflicts = FALSE)
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_names', .after = district_mdb)
dplyr::relocate()
library(dplyr, warn.conflicts = FALSE)
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
library(dplyr, warn.conflicts = FALSE)
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
library(tidyverse, warn.conflicts = FALSE)
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_names', .after = district_mdb)
View(district_names)
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb)
View(updated_hospital_list)
write_csv(updated_hospital_list, 'za_hospital_list_DoH.csv')
write_csv(updated_hospital_list, 'data/za_hospital_list_DoH.csv')
colnames(updated_hospital_list)
library(tidyverse, warn.conflicts = FALSE)
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb)
write_csv(updated_hospital_list, 'data/za_hospital_list_DoH.csv')
colnames(updated_hospital_list)
View(updated_hospital_list)
levels(updated_hospital_list$org_unit_type)
levels(as.factor(updated_hospital_list$org_unit_type))
levels_org <- levels(as.factor(updated_hospital_list$org_unit_type))
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate_if(is.character(), as.factor)
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate_if(is.character, as.factor)
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate_if(is.character, as.factor)
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate_if(is.character, as.factor())
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate_if(is.character(), as.factor())
hospital_list <- read.csv('data/za_hospital_list_refine.csv')
district_names <- read.csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate_if(is.character, as.factor)
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate(as.factor(province))
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate(as.factor(province))
hospital_list <- read.csv('data/za_hospital_list_refine.csv')
district_names <- read.csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate(as.factor(province))
hospital_list <- read_csv('data/za_hospital_list_refine.csv')
district_names <- read_csv('data/za_hospital_district_names.csv')
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate(as.factor(province))
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
province = mutate(as.factor(province))
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate(province = as.factor(province))
updated_hospital_list <- hospital_list %>%
# This way we'll ensure that the province column doesn't occur twice in the final dataset
merge(district_names, by = c('province', 'district_mdb')) %>%
# Move the newly added district_names column to just after the district_mdb column
relocate('district_name', .after = district_mdb) %>%
mutate(province = as.factor(province),
district_mdb = as.factor(district_mdb),
district_name = as.factor(district_name),
org_unit_type = as.factor(org_unit_type)
)
write_csv(updated_hospital_list, 'data/za_hospital_list_DoH.csv')
levels(updated_hospital_list$org_unit_type
)
View(updated_hospital_list)
